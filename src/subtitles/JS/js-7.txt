in this video I want to refocus on the

JavaScript syntax specifically and the

various parts of speech inside of a

properly formed statement in JavaScript

so I started by explaining JavaScript by

saying that you write statements each of

which are executed sequentially and

statements are complete thoughts

complete instructions to the JavaScript

compiler of what we want it to do for us

and I said the statements are made up of

one or more expressions and that an

expression is made up of operators and

operands and I just made that statement

of passing and kind of blew past it

really quickly but I wanted to take a

few moments and explain why that is an

important statement whenever we're

setting out to write code and so we've

already looked at a couple of different

operators if we're thinking about the

most atomic level of our JavaScript

statements we're thinking about in terms

of operators and operands so operators

are things like keywords we've already

looked at the addition operator using

the plus symbol we looked at the string

concatenation operator using the plus

symbol so that one is doing double duty

and it will be understood based on the

context of how it's being used and then

there's the assignment operator the

equal sign that we've already looked at

and soon we're gonna look at a few other

common ones just to start building out a

list of operators that we can use to do

and more interesting things inside of

our application but there's also an

operand so operators are things like

keywords and those various symbols that

we've already looked at and we'll add

more operands are something like

identifiers a variable name

we'll learn off function soon and

functions are another type of operand

and so unlike keywords and operators in

JavaScript which are fixed and part of

the language we you and I programmers

give operands their name and so by

combining operators and operands we

create expressions that are then used to

compose statements

and so sometimes it's easy to spot an

expression and then sometimes it's not

so easy but identifying several major

categories of expressions we can better

understand why JavaScript works

sometimes and why it doesn't work

sometimes so for example in the English

language we cannot write a sentence a

proper sentence like this the dog period

if we've said hey the dog somehow friend

would say what are you talking about the

dog did what which dog you know give me

some more information right why is that

not a proper sentence in English because

it didn't have enough inside of it to be

considered proper we have a noun we have

the dog but we don't have any verbs or

adjectives or adverbs describing or or

the you know kind of giving us more

detail about the dog the same thing is

true with JavaScript so we can't for

example and let me just create a quick

file here we'll call this expressions

Jas so we cannot do something like this

in our program right because the

JavaScript compiler will say okay what

do you want me to do with that that

makes no sense to me whatsoever I don't

know what you want me to do with a I

don't see it it's not one of my

variables you're not asking me to create

a new variable there's nothing inside of

a a means nothing to me

all right so at a minimum we're gonna

need to either and these are the types

of expressions and in a very high level

we're gonna either declare a variable so

we would do something like this once

again let a alright and even in this

little tiny two-word line of code

there's already an operator in an

operand here's the operator the let

keyword and here's the operand a name we

want to give to a new variable that will

could be created in memory all right so

that's one type of expression we're

gonna call this types of expression here

we'll just use some comments

types of expressions number-one variable

declaration like I spelled that right

alright so let's go ahead and move that

up to the very top and say this is bad

and then we'll do some like this I kind

of like doing some ASCII art there

whenever I create lists inside of my

code alright so there we go the other

one is to assign a value so the other

type of expression we can assign a value

so a equals 3 or 4 and then another type

of expression is to perform an

evaluation that returns single value and

so that might be something like and

we're talking purely about the

expression itself it might be something

like that B plus C so in a more

interesting example we might do

something along these lines and I'll

just comment this out because I want to

reuse a there we go good all right so

here we go line number 16 I'm gonna go

let B equals 3 let C equal 2 and then

let a equal B plus C I just want to

focus on line number 19 and I want to

say that there are three expressions in

here and you find them all right well

let's identify them so number one we're

gonna see that let's a so that's a

variable declaration the next thing

that's going to happen is we're gonna

perform an evaluation of B plus C right

and that will basically add those two

values together because we're using the

addition operator

and then finally we'll do the results of

B plus C is assigned to a so three

expressions all combined into a single

statement and there's a lot more going

on than meets the eye but that is the

kind of thinking that will help you

understand why your JavaScript code

works sometimes and sometimes it doesn't

you have to think in terms of writing

expressions that do things to form

properly formed JavaScript statements

all right so hopefully that little

lesson in syntax is helpful let's talk

about operators and the different types

of operators and again we've used this

collection of five or six operators so

far let's let's add to that collection

I'm going to go create a new file called

operators dot Jas and so there are

several categories of operators and I'll

just kind of go through them really

quickly here so there's assignment like

the equal sign it's really the only one

in this category but it's a pretty

important one we've seen to use quite a

bit there's maybe some other keywords

and things that can fall into this

category sort of but the assignment

operator is usually the only one in this

category and then there's arithmetic

with which as you might suppose would

allow you to do mathematical style

operations so that's the plus where we

adding two numbers together subtraction

multiplication that's the asterisk key

over the eight on most keyboards there's

also the division alright and then there

are some special ones like let's call

these and I'll they're kind of

arithmetic but I'm going to call them

increment decrement so this is the plus

plus and the minus minus and use out of

context these don't seem so interesting

but what we could do is for example

let's go VAR a equals 1 a plus plus and

then console.log

alright let's save that and then go over

to our terminal and I'm gonna do node

operators all right and so you can see

that we increment the value of a so

let's do this

let's now increment it one more time and

see and let's save our work here and

then let's run it again and wait a

second

the value is still - how is that

possible let's do this it's console.log

a and that so now we're gonna print the

value out twice we're going to print it

out I thought maybe we would get three

but we didn't but if we printed out a

second time let's see what value we get

and so when we printed out the second

time we get three and the reason is this

because this operator this increment

operator works after the line or after

the value is already utilized inside of

this line of code so basically hey

console dot log here's a and after you

print that to screen then let's add

something to it that's why we're able to

see the new value if I print it a second

time

alright what we may have preferred

instead of this is to go console dot log

and put the plus plus before the a that

means I want you to first evaluate the

increment of a and then print it to the

console dot log all right so let's say

that let's rerun this and now we see

three in both cases the same would be

true with the decrement where we could

subtract either before or after the

evaluation of that variable alright just

something to keep in mind all right so

that's increment and decrement there's

also going back to arithmetic there's

the modulus and this will give me the

the remainder amount so let's go var M

for modulus equals 10 divided by whoops

whoops whoops that's not what I wanted

10 modulus 3 and then I want to consult

log em and just to kind of keep

everything clean I'm gonna comment out

all this as well keep it around for

posterity but otherwise that's all I

want to see what will I get back from

this the statement and I get one

what is one it's the remainder so 10

divided by 3 equals 3 with one left over

that one is the modulus all right and

actually this becomes a lot more

interesting and important when we're

looping through lots of values and every

like 10th or 20th or 100th item I want

to print a little message to screen to

say hey we finished processing the 10th

the 20th the 30th the 40th the 50th item

all right and I use that actually

frequently so I'm a pretty big fan of

modulus comment that out so moving on to

the different categories of operators

let's talk about the various string

operators and we've already seen these

so this is going to be like the literal

string operator we're using single

quotes and then also we saw the string

concatenation operator that will take

two strings and allow them to be

appended together to create one new

string other operators precedence so we

might you know order of operations we

actually use this quite a bit even in

non-mathematical situations so for

example let's just do VAR b equals 1

plus 2 times 3 now if you're coming from

an algebra background there's an order

of operations where things should be

done in a certain order and I'm pretty

sure if memory serves me correctly it's

been a long time since I've had an

algebra course but you perform algebra

before you perform addition so why we

were to do a console log here I would

expect B to output 2 times 3 plus 1 so

that would be 7 let's see if my my

memory serves me correctly here

and yes it does but what that's not what

I want well I can use just like in

algebra I can use parentheses to kind of

control the order in which things are

evaluated so in this case I would do one

plus two first and then multiply that by

three which will give me a completely

different result of nine because three

times three equals nine okay

so we'll use this the the opening

closing parenthesis for different

purposes for example whenever we want to

do console.log these parenthesis are

also used as the the function invocation

operators alright and that just says

here's a function name called log it

will learn about function soon but I

want to actually invoke the function now

and I can even use the function

invocation operators the open a in close

parentheses to pass in arguments we'll

talk about that a little bit later but

again that is the F open and closed

parenthesis there are other operators

and I'll just put them here they may not

make a lot of sense at the moment but

they will soon when we look at decision

statements so there's the logical if I'm

sorry the logical and in the logical or

okay so when I want to add two things

together and evaluate two things

together either one of them needs to be

true or both of them needs to be true

and we'll look at that in in a little

while there's also the member accessor

operator so when we did console dot log

if you look at intellisense as I hit the

dot on the keyboard there's that period

why are we using a period there that

allows me to access the various members

of this object and we'll talk about

object and we'll talk about properties

and functions or methods of objects soon

but that's what allows me to add

says the log function of the console

object inside of Ja a JavaScript so here

again comment that out but we'll use the

period for that purpose we're gonna also

look at the code block operator soon and

so you know I'm going through all these

I'm saying hey we'll look at these soon

really the point of this exercise is to

say that there's lots of operators and

we're going to have to begin to identify

what all these special characters are

and the only way to do that is to first

of all learn that they exist what their

function is and then use them as we're

writing programs and so I think that's

really the only thing I wanted to say I

mean let me just put one more in here

the array element access operator goes

by different names but I'm just gonna

use that and so we'll use square

brackets for that purpose so almost

every single character the special

characters that are above our numeric

values and we can access using the shift

key and the various ones that are

usually on the right hand side of the

keyboard the various braces and brackets

and colons and semicolons and and all of

these are are used to for various

purpose interests in JavaScript and in

most programming languages alright so I

think that's all I really want to say

let's pick back up in the next video

you're doing great hang in there with me

we're getting through some of the easy

stuff and we're gonna start moving on to

some challenging stuff here really quick

but you're doing great see in the next

video

Thanks

you

