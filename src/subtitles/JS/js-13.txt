it seems like quite a while ago we

talked about variables but now that

we're working with blocks of code inside

a blocks of code like we had here in

Lyons number 23 and then 29 through 31

we need to talk about variable scope and

when I use the term scope

I mean variables are a little bit like

people in so much that variables have a

lifespan they're born they do work and

then they die and they're removed from

computer's memory when they go out of

scope and we'll see an example of that

in just a moment but they're also like

people in so much that they have a

citizenship I guess you can say in other

words depending on where they were born

they can work inside of some code blocks

but not other code blocks and so the

remainder of this video we're gonna look

at lifetime and availability or

citizenship I guess you can say inside

of the rest of your application so let

me create a new file and we're gonna

call this scope basics and there will be

more to say about scope as we move

forward and learn more about functions

and so on in just a little while here

but let's start and create first example

here so let a equals first I'm gonna

create a function called scope test and

inside here I'll just do a console dot

log and the first thing I want to see is

if I declare variable out here outside

of my function can I reference it inside

of my function and so to find out let's

just call scope test and see what we get

so here we're going to tighten node

scope basics and we can in fact view the

value of a variable that was declared

outside of the scope of a function we

can view it inside of the scope of that

function our

so the next thing that I want to do is

to say hey let's create variable here

now if I create a variable inside of a

function scope can I view it out here

outside of the function scope so

console.log B and let's see and so no

not only can I not see it but my

application actually blows up and you

can see the little caret here is right

underneath the B and it says B is not

defined so in other words you could kind

of think of it again in terms of the

lifespan we created a function and we

created a variable inside of that

function that variable lives as long as

that function is running but after the

function after that code block is has

completed executing then B is removed

from the computer's memory and

essentially thrown away therefore we

cannot reference that variable outside

of the function because it no longer

lives it's dead all right so we're gonna

have to comment that out and we can go

ahead and comment this out as well now

let's do one more thing here let's say

if a and let's do something silly here

if it's not equal to an empty string so

just to single quote marks next to each

other so then can we still see the value

of a even inside this innermost block of

code that we defined with an if

statement if we can we should see then

it printed here a second time the value

first so let's say what we have to run

this again and so we see first first the

first time is printed out and the second

time that is printed out all right so

yes if something is declared in an

outside scope it is visible or it can it

has citizenship in every inner scope

from that point on but here once again

if we were to create a variable

third and then try to reference it

outside of the code block in which it

was defined like so will this work what

do you think we're gonna get that same

kind of air before we have a little

arrow pointing to the C and it says that

C is not defined the variable C was

defined inside of this code block and

once we executed that code block and got

to the end of it then it C was removed

from the computer's memory it's no

longer available to us and since dies

and it's no longer available okay now

let's just do one last thing here just

to kind of understand that we are in

fact able to work with the variable that

was defined in the outermost scope can

we still work with it do it use it and

change its value so I'm going to change

this to changed and then I'm going to

reference it here console dot log a and

so now let's run our application one

more time all right so the first time

that it's run this first console dot log

it will be the value first but then we

change the value and we log it again and

that's where the second change comes

from after we've executed that function

then we execute line 20 and that's where

this third changed appears all right so

I guess the moral of the story once

again to kind of reiterate what we said

when you declare a variable you have to

understand in which scope it was defined

because based on the scope or rather the

code block in which that variable is

defined it's going to have a lifespan

and it's going to have citizenship if it

was defined in the outermost scope it

will have its life and its citizenship

and all inner scopes but if it's defined

in an inner most Gope it will not be

available to outer scopes now one last

thing and I'll kind of end it right here

if we

or to take and this is probably just a

question for you just thought question

if I defined be here right above that if

statement and then I attempt to use it

right here and call this inside if do

you think that we'll be able to

reference that value well based on what

we know about the rules I would expect

to see the value second print it out so

let's try it and in fact we do see it

so hopefully that supports your new

understanding of the scope variables

defining them outside of a code block

versus defining them inside of a code

block and trying to reference them

outside okay so hopefully that all makes

sense

I want to make sure you're clear on that

we're gonna revisit the topic of scope

because there's a lot more to this but

this is your first introduction so that

you kind of understand what the rules of

scope are at least in the most basic

sense alright so we'll continue on the

next video see there Thanks

